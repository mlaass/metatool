<template name="nlohmann-json">
<member name="serialize" delim="" remove_last_delim="True">
	j[&quot;{SHORT_MEMBER_NAME}&quot;] = input.{SHORT_MEMBER_NAME};
</member>
<member name="deserialize" delim="">
	output.{SHORT_MEMBER_NAME} = j[&quot;{SHORT_MEMBER_NAME}&quot;].get&lt;{MEMBER_TYPE}&gt;();
</member>
<struct name="header">
template &lt;&gt;  struct adl_serializer&lt;{TYPE}&gt;  {
	static void to_json(json &amp;j, const struct {TYPE} &amp;input);
	static void from_json(const json &amp;j, {TYPE} &amp;output);
};
</struct>
<struct name="impl">
template &lt;&gt; struct adl_serializer&lt;{TYPE}&gt; {
	static void to_json(json &amp;j, const struct {TYPE} &amp;input) {
		{members.serialize}
	}

	static void from_json(const json &amp;j, {TYPE} &amp;output) {
		{members.deserialize}
	}
};
</struct>
<file name="header" ext="hpp" >
/** autogenerated file **/
#ifndef {INCLUDE_GUARD_NAME}
#define {INCLUDE_GUARD_NAME}

#include &lt;json.hpp&gt;
/*
{INCLUDES}
*/

{structs.header}

#endif {INCLUDE_GUARD_NAME}
</file>
<file name="impl" ext="cpp">
/** autogenerated file **/
#include &lt;json.hpp&gt;
#include &lt;{filename.header}&gt;

{structs.impl}
</file>
</template>
