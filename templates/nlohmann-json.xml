<template name="nlohmann-json">
	<member name="serialize" delim="" remove_last_delim="True">j[&quot;{SHORT_NAME}&quot;] = input.{SHORT_NAME};
  </member>
	<member name="deserialize" delim="">output.{SHORT_NAME} = j[&quot;{SHORT_NAME}&quot;].get&lt;{TYPE}&gt;();
  </member>
	<struct name="header" delim="">
		template &lt;&gt;  struct nlohmann::adl_serializer&lt;{TYPE}&gt;  {
		static void to_json(nlohmann::json &amp;j, const struct {TYPE} &amp;input);
		static void from_json(const nlohmann::json &amp;j, {TYPE} &amp;output);
		};
	</struct>
	<struct name="impl" delim="">
		void nlohmann::adl_serializer&lt;{TYPE}&gt;::to_json(nlohmann::json &amp;j, const struct {TYPE} &amp;input) {
		{members.serialize}
		}
		void nlohmann::adl_serializer&lt;{TYPE}&gt;::from_json(const nlohmann::json &amp;j, {TYPE} &amp;output) {
		{members.deserialize}
		}
	</struct>
	<file name="header" ext="hpp">
		/** autogenerated file **/
		#ifndef {INCLUDE_GUARD_NAME}
		#define {INCLUDE_GUARD_NAME}

		#include &lt;json.hpp&gt;
		/*
		{INCLUDES}
		*/

		{structs.header}

		#endif {INCLUDE_GUARD_NAME}
	</file>
	<file name="impl" ext="cpp">
		/** autogenerated file: {filename.impl}**/
		#include &lt;json.hpp&gt;
		#include &quot;{filename.header}&quot;

		{structs.impl}
	</file>
</template>
