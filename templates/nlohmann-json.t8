name: nlohmann-json

def member name="serialize" delim="" remove_last_delim="True" ->
j["{SHORT_NAME}"] = input.{SHORT_NAME};
end

def member name="deserialize" delim="" ->
	output.{SHORT_NAME} = j["{SHORT_NAME}"].get<{TYPE}>();
end

def struct name="header" delim="" ->
template <>  struct nlohmann::adl_serializer<{TYPE}>  {
	static void to_json(nlohmann::json &j, const struct {TYPE} &input);
	static void from_json(const nlohmann::json &j, {TYPE} &output);
};

end

def struct name="impl" delim="" ->
void nlohmann::adl_serializer<{TYPE}>::to_json(nlohmann::json &j, const struct {TYPE} &input) {
	{members.serialize}
}
void nlohmann::adl_serializer<{TYPE}>::from_json(const nlohmann::json &j, {TYPE} &output) {
	{members.deserialize}
}

end

def file name="header" ext="hpp" ->
/** autogenerated file **/
#ifndef {INCLUDE_GUARD_NAME}
#define {INCLUDE_GUARD_NAME}

#include <json.hpp>
/*
{INCLUDES}
*/

{structs.header}

#endif {INCLUDE_GUARD_NAME}

end

def file name="impl" ext="cpp"->
/** autogenerated file: {filename.impl}**/
#include <json.hpp>
#include "{filename.header}"

{structs.impl}

end
